{
    "links": [
        {
            "href": "/v1/app/report/7f46977b-317a-4e4c-b4c3-c4afff88c282",
            "rel": "self"
        }
    ],
    "cloc": "       0 text files.\n       0 unique files.                              \n       1 file ignored.\n",
    "reports": [
        {
            "app_name": "Splunk Add-on Builder",
            "app_description": "Splunk Add-on Builder",
            "summary": {
                "skipped": 0,
                "success": 97,
                "not_applicable": 53,
                "failure": 5,
                "warning": 0,
                "error": 6,
                "manual_check": 41
            },
            "metrics": {
                "start_time": "2017-01-16T02:01:05.139617",
                "execution": 258.956811,
                "end_time": "2017-01-16T02:05:24.096428"
            },
            "run_parameters": {
                "version": null,
                "appinspect_version": "1.4.0.86",
                "splunk_version": null,
                "splunkbase_id": "unknown",
                "api_request_id": "9ed3f3c7-db8f-11e6-932f-02420aff0009",
                "package_location": "9ed3f3c7-db8f-11e6-932f-02420aff0009-splunk_app_addon-builder-2.1.0-2120.spl",
                "identity": "kyanite2016"
            },
            "groups": [
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 28,
                                    "code": "reporter.not_applicable(\"No limits.conf found.\")",
                                    "message": "No limits.conf found.",
                                    "filename": "check_limits_configuration_file.py"
                                }
                            ],
                            "description": "Check that changes made to default/limits.conf are documented.",
                            "name": "check_limits_conf"
                        }
                    ],
                    "name": "check_limits_configuration_file",
                    "description": "Limits.conf file standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 315,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "alert_actions.conf does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that custom alert actions do not use the command property.",
                            "name": "check_alert_actions_conf_does_not_have_command_property"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 364,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "authentication.conf does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that each stanza in authentication.conf does not have the the\n bindDNpassword property.",
                            "name": "check_authentication_conf_does_not_have_bindDNPassword_property"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 341,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "authentication.conf does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that each stanza in authentication.conf does not have the the\n sslKeysfilePassword property.",
                            "name": "check_authentication_conf_does_not_have_sslKeysfilePassword_property"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 166,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The `default/data/ui/alerts` directory does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that default/data/ui/alerts contains only .xml or .html files.",
                            "name": "check_default_data_ui_alerts_file_white_list"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 149,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The `default/data/ui/html` directory does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that default/data/ui/html contains only .xml or .html files.",
                            "name": "check_default_data_ui_html_file_white_list"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 205,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The `default/data/ui/manager` directory does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that default/data/ui/manager contains only .xml or .html files,\n and that if it configures modular inputs, it doesn't communicate unencrypted\n or store plain text credentials.",
                            "name": "check_default_data_ui_manager_file_white_list"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/data/ui/nav contains only .xml or .html files.",
                            "name": "check_default_data_ui_nav_file_white_list"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 115,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The `default/data/ui/panels` directory does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that default/data/ui/panels contains only .xml or .html files.",
                            "name": "check_default_data_ui_panels_directory_file_white_list"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 185,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The `default/data/ui/quickstart` directory does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that default/data/ui/quickstart contains only .xml or .html\n files.",
                            "name": "check_default_data_ui_quickstart_file_white_list"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/data/ui/views contains only allowed files.",
                            "name": "check_default_data_ui_views_directory_file_white_list"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/field_validator.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/aob_models.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/restmap.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/field_extraction_token.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/settings.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/server.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/web.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/ui-metrics-collector.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/field_extraction_field.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/aob_eval_functions.conf",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 75,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please investigate this file: default/field_extraction_kv_templates.conf",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that default/ contains only safe configuration files.",
                            "name": "check_default_directory_file_white_list"
                        },
                        {
                            "result": "failure",
                            "messages": [
                                {
                                    "result": "failure",
                                    "line": 456,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "default/inputs.conf contains a [monitor://] stanza that is monitoring more than allowed. Please remove this functionality. Stanza: [monitor://$SPLUNK_HOME/var/log/splunk/splunk_app_addon-builder_*_metric_events.log]",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that apps only monitor their own directory\n $SPLUNK_HOME/etc/apps/<app-dir>/*.",
                            "name": "check_for_appropiate_inputs_monitor_stanza"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 885,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for app auto-update features.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that the app does not implement auto-update features.",
                            "name": "check_for_auto_update_features"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/splunk_app_add_on_builder/markupsafe/_speedups.so  Format: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=9028ba18c8c29def8155249c3f03be77cf378ef5, not stripped\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_modular_alert_builder/modular_alert_builder/build_core/arf_template/python_lib_declare.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_modular_alert_builder/modular_alert_builder/build_core/arf_template/alert_action_helper.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_modular_alert_builder/modular_alert_builder/build_core/arf_template/alert_action.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_modular_alert_builder/modular_alert_builder/build_core/arf_template/test_import_declare.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources/bin/rest_input_module.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources/bin/input_module.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources/bin/python_lib_declare.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources/bin/cc_input.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources/bin/input.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources/bin/cmd_input_module.py.template  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: bin/ta_generator/resources_lib/markupsafe/_speedups.so  Format: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=96cbb948de1a3096cd60af45a6802c0de54bc5ac, not stripped\n",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 869,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check that any binary files that exist have accompanying source code. File: appserver/static/lib/ace/snippets/python.js  Format: Python script, ASCII text executable\n",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that all executable binary files have matching source code.",
                            "name": "check_for_binary_files_without_source_code"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 835,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check if the app is sending data to third-party services.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check if the app is sending data to 3rd party services.",
                            "name": "check_for_communication_with_third_party_services"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that indexes.conf does not declare volumes.",
                            "name": "check_for_index_volume_usage"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check [fifo] stanza is not used in inputs.conf.",
                            "name": "check_for_inputs_fifo_usage"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 945,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No java files found in app.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check if the app contains java files.",
                            "name": "check_for_java"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: bin/ta_generator/ucc_resources/appserver/static/js/build/inputs_page.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: bin/ta_generator/ucc_resources/appserver/static/js/build/configuration_page.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: bin/ta_generator/ucc_resources/appserver/static/js/build/common.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: bin/ta_generator/ucc_resources/appserver/static/js/build/1.1.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/regulex/regulex.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/defiant/defiant.min.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/ext-beautify.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/theme-eclipse.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-markdown.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-soy_template.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-yaml.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/theme-idle_fingers.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-lucene.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-haxe.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-jack.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-coldfusion.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/ext-static_highlight.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-diff.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-properties.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-dot.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/theme-ambiance.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-ftl.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/ext-textarea.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 926,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Javascript file found. File: appserver/static/lib/ace/mode-ocaml.js",
                                    "filename": "check_cloud_simple_app.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 582 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check if the app contains Javascript files.",
                            "name": "check_for_javascript"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 896,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for known vulnerabilities in third-party libraries. Use these links: https://web.nvd.nist.gov/view/vuln/search. and https://nvd.nist.gov/cvss.cfm",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check third party libraries for known vulnerabilities.",
                            "name": "check_for_known_vulnerabilities_in_third_party_libraries"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 968,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The `local` directory was not found.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that local settings do not violate security policies.",
                            "name": "check_for_local"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 808,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for Lookup tables pre-filled with customer data.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check for pre-filled lookup tables.",
                            "name": "check_for_lookup_tables_prefilled_with_customer_data"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 797,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for monitoring of Splunk Cloud infrastructure.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that the app does not monitor Splunk Cloud infrastructure.",
                            "name": "check_for_monitoring_of_splunk_cloud_infrastructure"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 913,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No Perl scripts found in app.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check if the app contains Perl scripts.",
                            "name": "check_for_perl"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 844,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for required access to private infrastructure.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check if the app requires access to private infrastructure.",
                            "name": "check_for_required_access_to_private_infrastructure"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 877,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for reverse shells.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that the app does not contain reverse shells.",
                            "name": "check_for_reverse_shells"
                        },
                        {
                            "result": "success",
                            "messages": [
                                {
                                    "result": "warning",
                                    "line": 483,
                                    "code": "reporter.warn(reporter_output)",
                                    "message": "Apps should not monitor $SPLUNK_HOME/var/log/* as Splunk already ensures files in this folder are are monitored.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that apps do not monitor the $SPLUNK_HOME/var/log/* directory.",
                            "name": "check_for_splunk_var_log_monitoring"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 826,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for UDP network communications.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check for UDP network communication.",
                            "name": "check_for_udp_network_communications"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 818,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Please check for unencrypted network communications.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that all network communications are encrypted.",
                            "name": "check_for_unencrypted_network_communications"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that indexes defined in indexes.conf use relative paths starting\n with $SPLUNK_DB.",
                            "name": "check_indexes_conf_only_uses_splunk_db_variable"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not contain a batch stanza.",
                            "name": "check_inputs_conf_for_batch"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not contain a fschange\n stanza.",
                            "name": "check_inputs_conf_for_fschange"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not use any global settings.",
                            "name": "check_inputs_conf_for_global_settings"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not contain a [http]\n stanza.",
                            "name": "check_inputs_conf_for_http_global_usage"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not contain a splunktcp\n stanza.",
                            "name": "check_inputs_conf_for_splunk_tcp"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not contain a splunktcptoken\n stanza.",
                            "name": "check_inputs_conf_for_splunktcptoken"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/inputs.conf does not contain a tcp stanza.",
                            "name": "check_inputs_conf_for_tcp"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that inputs.conf does not have any UDP inputs.",
                            "name": "check_inputs_conf_for_udp"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Checks that the [fifo] stanza does not use .. in any part of its\n path.",
                            "name": "check_inputs_fifo_for_parent_path"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Checks that the [monitor] stanza does not use .. in any part of its\n path.",
                            "name": "check_inputs_monitor_for_parent_path"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that lookups/ contains only white-listed files.",
                            "name": "check_lookups_white_list"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the metadata/ directory only contains .meta files.",
                            "name": "check_metadata_white_list"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that root directory contains only files with the following\n extensions '.md', '.pdf', '.rst', or '.txt', '.rtf', '.doc', '.docx',\n or filename is 'README'.",
                            "name": "check_root_directory_file_white_list"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 759,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "`default/setup.xml` does not exist.",
                                    "filename": "check_cloud_simple_app.py"
                                }
                            ],
                            "description": "Check that all passwords configured in setup.xml are stored in the\n storage/passwords endpoint. (Documentation)[http://docs.splunk.com/Documentation/Splunk/6.4.2/AdvancedDev/SetupExampleCredentials]",
                            "name": "check_setup_xml_for_incorrect_password_rest_endpoint"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the static/ directory contains only known file types.",
                            "name": "check_static_directory_file_white_list"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that transforms.conf does not contain any transforms with an\n external_cmd=<string> attribute.",
                            "name": "check_transforms_conf_for_external_cmd"
                        }
                    ],
                    "name": "check_cloud_simple_app",
                    "description": "Cloud Operations Simple Application Check"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 31,
                                    "code": "reporter.not_applicable(reporter_message)",
                                    "message": "No commands.conf exists.",
                                    "filename": "check_custom_commands.py"
                                }
                            ],
                            "description": "Check that commands.conf exists at default/commands.conf.",
                            "name": "check_command_conf_exists"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that custom search commands have an executable or script per \n stanza.",
                            "name": "check_command_scripts_exist"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that a valid\n default.meta\n file exists when using a custom search command.",
                            "name": "check_default_meta_exists"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 126,
                                    "code": "reporter.not_applicable(\"No `commands.conf` file exists.\")",
                                    "message": "No `commands.conf` file exists.",
                                    "filename": "check_custom_commands.py"
                                }
                            ],
                            "description": "Check that the custom commands attributes maxwait and maxchunksize\n are only used when chunked = true.\n Commands.conf reference",
                            "name": "check_ignored_parameters_v1_command"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 102,
                                    "code": "reporter.not_applicable(\"No `commands.conf` file exists.\")",
                                    "message": "No `commands.conf` file exists.",
                                    "filename": "check_custom_commands.py"
                                }
                            ],
                            "description": "Check for ignored arguments in commands.conf when chunked=true.\n Commands.conf reference",
                            "name": "check_ignored_parameters_v2_command"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that custom search commands using passauth have enableheader\n set to true.",
                            "name": "check_passauth_and_enableheader"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that custom search commands using requires_preop have \n streaming_preop set to true.",
                            "name": "check_requires_preop_and_streaming_preop"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that custom search commands using requires_srinfo have \n enableheader set to true.",
                            "name": "check_requires_srinfo_and_enableheader"
                        }
                    ],
                    "name": "check_custom_commands",
                    "description": "Custom search command structure and standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for command injection through environment variables.",
                            "name": "check_for_command_injection_through_env_vars"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/validation_cim_mapping/cim_mapping_validator.py:16: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/validation_cim_mapping/cim_mapping_validator.py:19: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/validation_cim_mapping/cim_mapping_validator.py:20: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/tabuilder_utility/app_util.py:18: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/tabuilder_utility/temp_manager.py:20: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/tabuilder_utility/validation_utility.py:38: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/tabuilder_utility/validation_utility.py:105: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/tabuilder_utility/validation_utility.py:124: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/tabuilder_utility/tab_conf_manager.py:293: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_platform.py:17: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_platform.py:54: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_platform.py:84: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_platform.py:85: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_platform.py:97: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_platform.py:98: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/common/log.py:38: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/common/util.py:44: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/common/util.py:45: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/common/util.py:46: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/common/util.py:47: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/common/util.py:102: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/requests/sessions.py:661: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/requests/sessions.py:662: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Environment variable being used in bin/splunk_app_add_on_builder/requests/packages/urllib3/contrib/appengine.py:285: os.environ",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 101 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check for the use of environment variables.",
                            "name": "check_for_environment_variable_use_in_python"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: socket File: bin/splunk_app_add_on_builder/six.py Line Number: 275",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 295",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 296",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 297",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 298",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 320",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 325",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 326",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 327",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 328",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 329",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 330",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 331",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 332",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 333",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 334",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 335",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 336",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 337",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 338",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 339",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 340",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 341",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 72,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Possible insecure HTTP Connection. Match: urllib File: bin/splunk_app_add_on_builder/six.py Line Number: 342",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 1393 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check for insecure HTTP calls in Python.",
                            "name": "check_for_insecure_http_calls_in_python"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for use of pexpect to ensure it is only controlling app \n processes.",
                            "name": "check_for_pexpect"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in README/settings.conf.spec:23: password = <string>",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in README/settings.conf.spec:34: password = <password>",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:124: password=None):",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:161: password=None,",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:303: password=None):",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:332: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:456: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:541: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:596: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:656: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:741: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/socks.py:798: password = self.proxy",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/sockshandler.py:27: password=None,",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/sockshandler.py:39: password=None,",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/credentials.py:240: password = \"\"",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/credentials.py:241: password = \"\"",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/conf_manager/ta_conf_manager.py:186: password = None",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/conf_manager/ta_conf_manager.py:189: password = self._cred_mgr.get_clear_password(",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/core/http.py:180: password = proxy.password",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/core/models.py:69: password = options.get('password')",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/core/models.py:74: password = _Token(password)",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/cloudconnectlib/core/models.py:78: password = self._password.render(context)",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/requests/adapters.py:176: password = get_auth_from_url(proxy)",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 38,
                                    "code": "\"Possible secret disclosure in {}: {}\".format(match[0], match[1].group()))",
                                    "message": "Possible secret disclosure in bin/splunk_app_add_on_builder/requests/adapters.py:180: password=password,",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 215 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check for passwords and secrets.",
                            "name": "check_for_secret_disclosure"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/executor_service/concurrent/thread_pool.py:258: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/common_util.py:150: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/common_util.py:170: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/app_util.py:45: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/app_util.py:61: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/app_util.py:76: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/tab_conf_manager.py:143: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/tab_conf_manager.py:245: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/tab_conf_manager.py:248: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/tab_conf_manager.py:251: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/tab_conf_manager.py:277: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/tab_conf_manager.py:279: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/data_input_util.py:193: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/package_utility.py:322: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/tabuilder_utility/package_utility.py:350: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/ta_meta_management/meta_manager.py:188: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/ta_meta_management/meta_manager.py:211: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/ta_meta_management/meta_client.py:63: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/ta_meta_management/meta_client.py:85: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/splunk_app_add_on_builder/cloudconnectlib/client.py:40: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/orphan_process_monitor.py:65: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/rest.py:3: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/rest.py:42: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 82,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Stacktrace being formatted in bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/timer_queue.py:81: format_exc",
                                    "filename": "check_security.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 238 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check that stack traces are not being returned to an end user.",
                            "name": "check_for_stacktrace_returned_to_user"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for command injection in VBS files.",
                            "name": "check_for_vbs_command_injection"
                        }
                    ],
                    "name": "check_security",
                    "description": "Security vulnerabilities"
                },
                {
                    "checks": [
                        {
                            "result": "error",
                            "messages": [
                                {
                                    "result": "error",
                                    "line": 443,
                                    "code": "self.fun.__call__(*args)",
                                    "message": "argument of type 'NoneType' is not iterable",
                                    "filename": "/usr/local/lib/python2.7/dist-packages/splunk_appinspect/checks.py"
                                }
                            ],
                            "description": "Check that outbound HTTP traffic is necessary.",
                            "name": "check_for_http_connections"
                        },
                        {
                            "result": "error",
                            "messages": [
                                {
                                    "result": "error",
                                    "line": 443,
                                    "code": "self.fun.__call__(*args)",
                                    "message": "argument of type 'NoneType' is not iterable",
                                    "filename": "/usr/local/lib/python2.7/dist-packages/splunk_appinspect/checks.py"
                                }
                            ],
                            "description": "Check that indexes defined by the app are successfully created.",
                            "name": "check_for_index_creation"
                        }
                    ],
                    "name": "check_with_searches",
                    "description": "Post installation checks"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that restmap.conf file exists at default/restmap.conf when \n using REST endpoints.",
                            "name": "check_restmap_conf_exists"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that each stanza in restmap.conf has a matching handler script.",
                            "name": "check_rest_handler_scripts_exist"
                        }
                    ],
                    "name": "check_rest_endpoints",
                    "description": "REST endpoints and handler standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 114,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "visualizations.conf does not exist.",
                                    "filename": "check_custom_visualizations.py"
                                }
                            ],
                            "description": "Check that each custom visualization stanza in\n default/visualizations.conf has a matching directory in the\n appserver/static/visualizations/ directory.",
                            "name": "check_for_matching_stanza_visualization_directory"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 38,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "visualizations.conf does not exist.",
                                    "filename": "check_custom_visualizations.py"
                                }
                            ],
                            "description": "Check that custom visualizations have an\n appserver/static/visualizations/ directory.",
                            "name": "check_for_visualizations_directory"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 79,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "visualizations.conf does not exist.",
                                    "filename": "check_custom_visualizations.py"
                                }
                            ],
                            "description": "Check that each stanza in default/vizualizations.conf has a matching\n stanza in metadata/default.meta`.",
                            "name": "check_that_visualizations_conf_has_matching_default_meta_stanza"
                        }
                    ],
                    "name": "check_custom_visualizations",
                    "description": "Custom Visualizations Support Checks"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 22,
                                    "code": "reporter.manual_check(\"Branding will be inspected during code review.\")",
                                    "message": "Branding will be inspected during code review.",
                                    "filename": "check_intellectual_property.py"
                                }
                            ],
                            "description": "Check that use of the Splunk logo and name meets Splunk\n branding guidelines.",
                            "name": "check_splunk_logo"
                        }
                    ],
                    "name": "check_intellectual_property",
                    "description": "Intellectual property standards"
                },
                {
                    "checks": [
                        {
                            "result": "error",
                            "messages": [
                                {
                                    "result": "error",
                                    "line": 443,
                                    "code": "self.fun.__call__(*args)",
                                    "message": "argument of type 'NoneType' is not iterable",
                                    "filename": "/usr/local/lib/python2.7/dist-packages/splunk_appinspect/checks.py"
                                }
                            ],
                            "description": "Check that any saved searches in savedsearches.conf execute without errors.",
                            "name": "check_saved_searches_execute"
                        }
                    ],
                    "name": "check_saved_searches_dynamic",
                    "description": "Saved search dynamic checks"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the 'local' directory does not exist. All configuration\n should be in the 'default' directory.",
                            "name": "check_that_local_does_not_exist"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the file 'local.meta' does not exist. All metadata\n permissions should be set in 'default.meta'.",
                            "name": "check_for_local_meta"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 59,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "The local directory does not exist.",
                                    "filename": "check_application_structure.py"
                                }
                            ],
                            "description": "Check that local/passwords.conf does not exist. Password files are not\n transferable between instances.",
                            "name": "check_that_local_passwords_conf_does_not_exist"
                        }
                    ],
                    "name": "check_application_structure",
                    "description": "Directory Structure Standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 28,
                                    "code": "reporter.not_applicable(\"No outputs.conf found.\")",
                                    "message": "No outputs.conf found.",
                                    "filename": "check_outputs_configuration_file.py"
                                }
                            ],
                            "description": "Check that forwarding enabled in 'outputs.conf' is explained in the \n app's documentation.",
                            "name": "check_if_outputs_conf_exists"
                        }
                    ],
                    "name": "check_outputs_configuration_file",
                    "description": "Outputs.conf file standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that all files not in the /bin directory do not have *nix execute\n permissions. Splunk recommends 644 for all files outside of bin/ and 755 \n for all directories and files in the bin/ directory.",
                            "name": "check_for_bin_files"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that no disallowed files exist and that no unknown files exist.",
                            "name": "check_for_disallowed_file_extensions"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_edit_datainputs.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_edit_fieldextraction.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/apps_manage.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_edit_sourcetype.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_migrate.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_edit_cimmapping.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_edit_globalsettings.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_home.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_validation.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_package.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/controller_util.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_create.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/controllers/app_edit_modularalert.py",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 69,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The executable will be inspected during code review:  File: appserver/static/lib/ace/snippets/python.js",
                                    "filename": "check_source_and_binaries.py"
                                }
                            ],
                            "description": "Check that files with executable permissions are required.",
                            "name": "check_for_executable_flag"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that no files have *nix write permissions for all users\n (xx2, xx6, xx7). Splunk recommends 644 for all files outside of bin/ and\n 755 for all directories and files in the bin/ directory.",
                            "name": "check_for_expansive_permissions"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that there are no hidden files or directories.",
                            "name": "check_for_hidden_files"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.splunk.com/goto/devagreement. File: license-eula.rtf Line: 23",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://docs.splunk.com/Documentation/Splunk/latest/Admin/Aboutconfigurationfiles File: README/ui-metrics-collector.conf.spec Line: 10",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://docs.splunk.com/Documentation/Splunk/latest/Admin/Aboutconfigurationfiles File: README/settings.conf.spec Line: 10",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://docs.splunk.com/Documentation/Splunk/latest/SearchReference/CommonEvalFunctions\" File: bin/tabuilder_utility/ko_util/cim_util.py Line: 383",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://httpbin.org/ip\").read().decode()) File: bin/splunk_app_add_on_builder/sockshandler.py Line: 78",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: https://httpbin.org/ip\").read().decode()) File: bin/splunk_app_add_on_builder/sockshandler.py Line: 79",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-04/schema#\", File: bin/splunk_app_add_on_builder/cloudconnectlib/configuration/schema_1_0_0.json Line: 2",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-03/schema\"} File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 719",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-03/schema File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 722",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-04/schema\"} File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 726",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-04/schema File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 729",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-03/schema File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 746",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-03/schema\"} File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 751",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-04/schema File: bin/splunk_app_add_on_builder/jsonschema/tests/test_validators.py Line: 757",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-04/schema#\", File: bin/splunk_app_add_on_builder/jsonschema/schemas/draft4.json Line: 2",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-04/schema#\", File: bin/splunk_app_add_on_builder/jsonschema/schemas/draft4.json Line: 55",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-03/schema#\", File: bin/splunk_app_add_on_builder/jsonschema/schemas/draft3.json Line: 2",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://json-schema.org/draft-03/schema#\", File: bin/splunk_app_add_on_builder/jsonschema/schemas/draft3.json Line: 7",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.usertrust.com File: bin/splunk_app_add_on_builder/requests/cacert.pem Line: 824",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.usertrust.com File: bin/splunk_app_add_on_builder/requests/cacert.pem Line: 825",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.chambersign.org File: bin/splunk_app_add_on_builder/requests/cacert.pem Line: 858",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.chambersign.org File: bin/splunk_app_add_on_builder/requests/cacert.pem Line: 859",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.chambersign.org File: bin/splunk_app_add_on_builder/requests/cacert.pem Line: 894",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 110,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A file was detected contains that a url. Match: http://www.chambersign.org File: bin/splunk_app_add_on_builder/requests/cacert.pem Line: 895",
                                    "filename": "check_source_and_binaries.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 374 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check that URLs do not include redirect or requests from external web\n sites.",
                            "name": "check_for_urls_in_files"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 207,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No platform-specific binaries found.",
                                    "filename": "check_source_and_binaries.py"
                                }
                            ],
                            "description": "Check that documentation declares platform-specific binaries.",
                            "name": "check_platform_specific_binaries"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 128,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "Didn't find any flash files",
                                    "filename": "check_source_and_binaries.py"
                                }
                            ],
                            "description": "Check that the app does not use Flash for visualizations.",
                            "name": "check_requires_adobe_flash"
                        }
                    ],
                    "name": "check_source_and_binaries",
                    "description": "Source code and binaries standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the app has an icon, in PNG format, located at\n static/appIcon.png (36x36px) and static/appIcon_2x.png (72x72px).",
                            "name": "check_app_icon"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the app.conf contains an application version number in the\n [launcher] stanza.",
                            "name": "check_app_version"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that default/app.conf setting is_configured = False.",
                            "name": "check_that_setup_has_not_been_performed"
                        }
                    ],
                    "name": "check_app_configuration_file",
                    "description": "App.conf standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that <option name=\"height\"> uses an integer for the value. Do not \n use <option name=\"height\">[value]px</option>.",
                            "name": "check_for_noninteger_height_option"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check Simple XML files for <single> panels with deprecated options\n 'additionalClass', 'afterLabel', 'beforeLabel', 'classField', 'linkFields',\n 'linkSearch', 'linkView'",
                            "name": "check_for_simple_xml_single_element_with_deprecated_option_names"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Checks that views are not importing d3chartview.",
                            "name": "check_for_splunk_js_d3chartview"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Checks that views are not importing googlemapsview.",
                            "name": "check_for_splunk_js_googlemapsview"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the 'appServerPorts' property in the web.conf does not contain\n port 0.",
                            "name": "check_for_splunk_web_legacy_mode"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that a web.conf does not use the property\n 'simple_xml_force_flash_charting'.",
                            "name": "check_web_conf_for_simple_xml_force_flash_charting"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that web.conf does not use the simple_xml_module_render\n property.",
                            "name": "check_web_conf_for_simple_xml_module_render"
                        }
                    ],
                    "name": "check_splunk_6_4_deprecated_features",
                    "description": "Deprecated features from Splunk 6.4."
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that a valid workflow_actions.conf file exists at\n default/workflow_actions.conf.",
                            "name": "check_command_conf_exists"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that stanzas in workflow_actions.conf.spec have the required\n fields, type, and label.",
                            "name": "check_required_stanza_fields_are_specified"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that for each workflow action in workflow_actions.conf the\n link.uri property starts with https.",
                            "name": "check_workflow_actions_for_unexpected_link_uri"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that for each workflow action in workflow_actions.conf the\n link.uri property does not use the http protocol.",
                            "name": "check_workflow_actions_link_uri_does_not_use_http_protocol"
                        }
                    ],
                    "name": "check_workflow_actions",
                    "description": "Custom workflow actions structure and standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for the use of malicious commands designed to corrupt the OS or\n Splunk instance.",
                            "name": "check_destructive_commands"
                        },
                        {
                            "result": "failure",
                            "messages": [
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_mi.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/tab_declare.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_mi.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/Constants.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/prebuilt_panel_search.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/cim_mapping_validator.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/DataModelMatcher.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/TestTemplate.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/CaseGenerator.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/__init__.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/ConstraintsComparer.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/FiledsComparer.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/DataModelParser.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/validation_cim_mapping/PrebuiltPanelSearch.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/executor_service/__init__.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_cluster.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_logger.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/__init__.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_util.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_serialize.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_process.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_conf.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/regex_exception.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 82,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "A file in the bin/ directory was detected without the executable bit set. Please change this file's persmissions so that it is executable. File: bin/field_extraction_builder/data_format/format_handler_table.py",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 1114 failure messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check that files in the /bin directory have executable permissions.",
                            "name": "check_executable_files"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 136,
                                    "code": "\"File access will be inspected during code review.\")",
                                    "message": "File access will be inspected during code review.",
                                    "filename": "check_potentially_harmful_operations.py"
                                }
                            ],
                            "description": "Check that applications only write to the following directories\n <SPLUNK_HOME>/etc/<APP_NAME>/local,\n <SPLUNK_HOME>/etc/<APP_NAME>/lookup\n<SPLUNK_HOME>/var/log/<APP_NAME>/<LOG_NAME>.log,\n <SPLUNK_HOME>/var/log/<APP_NAME>.log\n<SPLUNK_HOME>/var/run and OS temporary directories.",
                            "name": "check_fs_writes"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/tags.conf')' File: bin/validation_cim_mapping/cim_mapping_validator.py:17 Line: 17",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/default/data/models')' File: bin/validation_cim_mapping/cim_mapping_validator.py:19 Line: 19",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/Splunk/etc/apps/Splunk_SA_CIM/default/data/models\"**' File: bin/validation_cim_mapping/DataModelTree:2 Line: 2",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/apps/Splunk_SA_CIM/default/data/models/'' File: bin/validation_cim_mapping/DataModelParser.py:61 Line: 61",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/5:' File: bin/field_extraction_builder/data_format/format_handler_table.py:198 Line: 198",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/nobody/system/apps/local/{}/_reload'.format(app_name)' File: bin/tabuilder_utility/common_util.py:163 Line: 163",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/licenser/groups\"' File: bin/tabuilder_utility/app_util.py:34 Line: 34",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/cluster/config\"' File: bin/tabuilder_utility/app_util.py:52 Line: 52",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/shcluster/config\"' File: bin/tabuilder_utility/app_util.py:66 Line: 66",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/png;base64,{}\".format(app.get(' File: bin/tabuilder_utility/app_util.py:179 Line: 179",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/splunkd/__raw/servicesNS/admin/{}/static/appIcon_2x.png\".format(' File: bin/tabuilder_utility/app_util.py:186 Line: 186",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/splunkd/__raw/servicesNS/admin/splunk_app_addon-builder/static/icon_default_ta.png\"' File: bin/tabuilder_utility/app_util.py:188 Line: 188",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/appIcon_2x.png\")' File: bin/tabuilder_utility/app_util.py:190 Line: 190",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/data/models\"' File: bin/tabuilder_utility/ko_util/cim_util.py:127 Line: 127",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/Documentation/Splunk/latest/SearchReference/CommonEvalFunctions\"' File: bin/tabuilder_utility/ko_util/cim_util.py:383 Line: 383",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/EVENT_COUNT_PER_OBJECT:' File: bin/ta_meta_management/meta_manager_event.py:126 Line: 126",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/datetime.xml',' File: bin/sourcetype_builder/sourcetype_builder.py:212 Line: 212",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/1.1\",' File: bin/splunk_app_add_on_builder/socks.py:662 Line: 662",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/\"):' File: bin/splunk_app_add_on_builder/socks.py:686 Line: 686",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/ip\").read().decode())' File: bin/splunk_app_add_on_builder/sockshandler.py:78 Line: 78",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/ip\").read().decode())' File: bin/splunk_app_add_on_builder/sockshandler.py:79 Line: 79",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/server/info\".format(splunkd_uri)' File: bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/splunk_cluster.py:23 Line: 23",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/x-www-form-urlencoded\"' File: bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/rest.py:25 Line: 25",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 63,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Found possible hard-coded path '/json\":' File: bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/rest.py:29 Line: 29",
                                    "filename": "check_potentially_harmful_operations.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 3967 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check for hard-coded filepaths in scripts relative to author's local\n developer environment, or absolute paths.",
                            "name": "check_hard_coded_paths"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that scripts are not trying to switch into other user accounts,\n create new users, run sudo.",
                            "name": "check_user_privileges"
                        }
                    ],
                    "name": "check_potentially_harmful_operations",
                    "description": "Operating system standards"
                },
                {
                    "checks": [
                        {
                            "result": "failure",
                            "messages": [
                                {
                                    "result": "failure",
                                    "line": 32,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "Apps and add-ons should not create indexes. Indexes should only be defined by Splunk System Administrators to meet the data storage and retention needs of the installation. Consider using Tags or Source Types to identify data instead index location.",
                                    "filename": "check_indexes_configuration_file.py"
                                }
                            ],
                            "description": "Check that the app does not create indexes.",
                            "name": "check_indexes_conf_does_not_exist"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that no default Splunk indexes are modified by the app.",
                            "name": "check_validate_default_indexes_not_modified"
                        }
                    ],
                    "name": "check_indexes_configuration_file",
                    "description": "Indexes.conf File Standards"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that indexes created by the app are explained in the app's \n documentation.",
                            "name": "check_creates_index"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 68,
                                    "code": "reporter.not_applicable(\"No datamodels.conf file exists.\")",
                                    "message": "No datamodels.conf file exists.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that the use of datamodels is explained in the app's\n documentation.",
                            "name": "check_implements_data_models"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 81,
                                    "code": "reporter.not_applicable(\"No use of 'inputcsv' found.\")",
                                    "message": "No use of 'inputcsv' found.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that the use of\n inputcsv\n is explained in the app's documentation.",
                            "name": "check_implements_inputcsv"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that the use of\n outputcsv\n is explained in the app's documentation.",
                            "name": "check_implements_outputcsv"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 54,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that use of\n 'tscollect'\n is explained in the app's documentation.",
                            "name": "check_implements_tscollect"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 108,
                                    "code": "reporter.not_applicable(\"No outputs.conf exists.\")",
                                    "message": "No outputs.conf exists.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that any outbound network communications in\n outputs.conf\n are explained in the app's documentation.",
                            "name": "check_initiates_outbound_communications"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 118,
                                    "code": "reporter.manual_check(\"File access will be inspected during code review.\")",
                                    "message": "File access will be inspected during code review.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that file access outside of the app's home directory,\n $SPLUNK_HOME/var/log, $SPLUNK_HOME/var/run, and system temporary directories\n is explained in the app's documentation.",
                            "name": "check_requires_access_to_files_outside_apps_dir"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 29,
                                    "code": "reporter.not_applicable(\"No eventgen.conf file exists.\")",
                                    "message": "No eventgen.conf file exists.",
                                    "filename": "check_documentation_for_sensitive_functionality.py"
                                }
                            ],
                            "description": "Check that use of 'eventgen.conf' is explained in the app's \n documentation.",
                            "name": "check_uses_eventgen"
                        }
                    ],
                    "name": "check_documentation_for_sensitive_functionality",
                    "description": "Appropriate use of sensitive functionality"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the app has a /README file that includes\n version support, system requirements, installation, configuration,\n troubleshooting and running of the app, or a link to online documentation.",
                            "name": "check_basic_readme"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 141,
                                    "code": "reporter.not_applicable(\"No commands.conf file exits.\")",
                                    "message": "No commands.conf file exits.",
                                    "filename": "check_documentation_standards.py"
                                }
                            ],
                            "description": "Check that use of custom commands\n is explained in the app's documentation.",
                            "name": "check_custom_commands"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 127,
                                    "code": "reporter.not_applicable(\"No savedsearches.conf file exists.\")",
                                    "message": "No savedsearches.conf file exists.",
                                    "filename": "check_documentation_standards.py"
                                }
                            ],
                            "description": "Check that use of\n report acceleration,\n search acceleration, or summary indexing is explained in the app's\n documentation.",
                            "name": "check_search_acceleration"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 110,
                                    "code": "reporter.not_applicable(\"No datamodels.conf file exists.\")",
                                    "message": "No datamodels.conf file exists.",
                                    "filename": "check_documentation_standards.py"
                                }
                            ],
                            "description": "Check that use of\n data model acceleration\n is explained in the app's documentation.",
                            "name": "check_datamodel_acceleration"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 152,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_documentation_standards.py"
                                }
                            ],
                            "description": "Check that prerequisites of the app are explained in the app's\n documentation. All prerequisites must be either\n packaged with your app, or be available on Splunkbase as a certified app.",
                            "name": "check_dependencies"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 94,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_documentation_standards.py"
                                }
                            ],
                            "description": "Check that all open source components used in developing the app are\n listed in the app's README files with the version number and a link to the\n project's website.",
                            "name": "check_documented_included_open_source"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that documentation is in English.",
                            "name": "check_documentation_language"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_documentation_standards.py"
                                }
                            ],
                            "description": "Check that documentation is free of major editing and\n proofreading (spelling, grammar, punctuation) issues.",
                            "name": "check_editing_and_proofreading"
                        }
                    ],
                    "name": "check_documentation_standards",
                    "description": "Documentation standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that a valid inputs.conf.spec file are located in the README/ \n directory.",
                            "name": "check_inputs_conf"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that README/inputs.conf.spec contains stanzas.",
                            "name": "check_validate_inputs_conf_spec_no_inputs"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that there is a script file in 'bin/' for each modular input\n defined in 'README/inputs.conf.spec'.",
                            "name": "check_modular_inputs_scripts_exist"
                        },
                        {
                            "result": "failure",
                            "messages": [
                                {
                                    "result": "failure",
                                    "line": 110,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "The stanza [monitor://$SPLUNK_HOME/var/log/splunk/splunk_app_addon-builder_*_metric_events.log] is not found in the inputs.conf.spec",
                                    "filename": "check_modular_inputs.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 110,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "The stanza [validation_mi] is not found in the inputs.conf.spec",
                                    "filename": "check_modular_inputs.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 110,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "The stanza [field_extraction_mi] is not found in the inputs.conf.spec",
                                    "filename": "check_modular_inputs.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 110,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "The stanza [field_extraction_mi://_tab_internal_monitor_inputs_] is not found in the inputs.conf.spec",
                                    "filename": "check_modular_inputs.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 110,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "The stanza [validation_mi://_tab_internal_monitor_inputs_] is not found in the inputs.conf.spec",
                                    "filename": "check_modular_inputs.py"
                                }
                            ],
                            "description": "Check that modular inputs (default/inputs.conf) and specification files (README/inputs.conf.spec) match.",
                            "name": "check_validate_inputs_conf_matches_spec_scheme"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that modular inputs specify arguments.",
                            "name": "check_validate_inputs_conf_spec_no_args_on_inputs"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that modular input stanzas do not contain duplicate arguments.",
                            "name": "check_validate_inputs_conf_spec_no_duplicate_args_on_inputs"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that modular inputs do not have duplicate stanzas.",
                            "name": "check_validate_inputs_conf_spec_no_duplicate_stanzas"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check lines breaks are included in configuration when using a modular \n input.",
                            "name": "check_validate_inputs_conf_spec_stanza_args_broken_correctly"
                        }
                    ],
                    "name": "check_modular_inputs",
                    "description": "Modular inputs structure and standards"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 22,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_external_data_sources.py"
                                }
                            ],
                            "description": "Check that all external data sources are explained in the app's\n documentation.",
                            "name": "check_external_data_sources"
                        }
                    ],
                    "name": "check_external_data_sources",
                    "description": "Calls to external data sources"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the app does not include viruses.",
                            "name": "check_for_viruses"
                        }
                    ],
                    "name": "check_viruses",
                    "description": "Malware/viruses, malicious content, user security standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that .csv files have a least one row.",
                            "name": "check_lookup_csv_has_rows"
                        }
                    ],
                    "name": "check_lookup_files",
                    "description": "Lookup file standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 120,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No REPORT- properties were declared.",
                                    "filename": "check_props_configuration_file.py"
                                }
                            ],
                            "description": "Check that there is a 'transforms.conf' file when REPORT- options are \n defined in props.conf.",
                            "name": "check_props_conf_has_report_option_and_transforms_conf_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 162,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No REPORT- properties were declared.",
                                    "filename": "check_props_configuration_file.py"
                                }
                            ],
                            "description": "Check that each REPORT- in props.conf has an associated stanza in\n transforms.conf file.",
                            "name": "check_props_conf_has_report_option_and_transforms_conf_has_matching_stanza"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 215,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No REPORT- properties were declared.",
                                    "filename": "check_props_configuration_file.py"
                                }
                            ],
                            "description": "Check that REPORT- options in props.conf, have either DELIMS or REGEX\n options in the matching transforms.conf stanza.",
                            "name": "check_props_conf_has_report_option_and_transforms_conf_has_required_option"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 48,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No TRANSFORMS- properties were declared.",
                                    "filename": "check_props_configuration_file.py"
                                }
                            ],
                            "description": "Check that there is a 'transforms.conf' file when TRANSFORM- options\n are defined in props.conf.",
                            "name": "check_props_conf_has_transforms_option_and_transforms_conf_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 89,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No TRANSFORMS- properties were declared.",
                                    "filename": "check_props_configuration_file.py"
                                }
                            ],
                            "description": "Check that TRANSFORM- options in props.conf have associated stanzas in\n transforms.conf file.",
                            "name": "check_props_conf_has_transforms_option_and_transforms_conf_has_matching_stanza"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that the props.conf stanzas (delayedrule, host, rule, or source) \n are followed by ::.",
                            "name": "check_props_conf_regex_stanza_name_followed_by_double_colon"
                        }
                    ],
                    "name": "check_props_configuration_file",
                    "description": "Props Configuration file standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that all JSON files are well formed.",
                            "name": "check_validate_json_data_is_well_formed"
                        }
                    ],
                    "name": "check_json_files",
                    "description": "JSON file standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check to ensure iframe elements don't violate security policy.",
                            "name": "check_for_iframe_in_xml_files"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that all XML files are well-formed.",
                            "name": "check_that_all_xml_files_are_well_formed"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 92,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Embedded javascript has been detected. Total line(s) of code found: 2. File: default/data/ui/views/tab_apm_dashboard.xml.",
                                    "filename": "check_xml_files.py"
                                }
                            ],
                            "description": "Check to ensure any XML files do not embed JavaScript via inline\n calls or external references.",
                            "name": "check_validate_no_embedded_javascript"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Ensure that global event handlers are not used within XML files.",
                            "name": "check_validate_no_event_handler"
                        }
                    ],
                    "name": "check_xml_files",
                    "description": "XML file standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 33,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No savedsearches.conf file exits.",
                                    "filename": "check_saved_searches.py"
                                }
                            ],
                            "description": "Check that a savedsearches.conf file exists at \n default/savedsearches.conf.",
                            "name": "check_saved_search_conf_exists"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 84,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No savedsearches.conf exists.",
                                    "filename": "check_saved_searches.py"
                                }
                            ],
                            "description": "Check that email alerts (action.email.to) set in savedsearches.conf\n do not have a default value.",
                            "name": "check_for_emails_in_saved_search"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 144,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "`default/savedsearches.conf` does not exist.",
                                    "filename": "check_saved_searches.py"
                                }
                            ],
                            "description": "Check that default/savedsearches.conf searches are cron scheduled\n reasonably. Less than five asterisks should be used.",
                            "name": "check_for_gratuitous_cron_scheduling"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 106,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "`default/savedsearches.conf` does not exist.",
                                    "filename": "check_saved_searches.py"
                                }
                            ],
                            "description": "Check that no real-time pre-index saved searches are being used in\n savedsearches.conf. Real-time per-index saved searches are extremely\n system intensive and should be avoided.",
                            "name": "check_for_real_time_saved_searches"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that saved searches have a search string specified.",
                            "name": "check_saved_search_specifies_a_search"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that saved searches are enabled.",
                            "name": "check_saved_searches_are_not_disabled"
                        }
                    ],
                    "name": "check_saved_searches",
                    "description": "Saved search standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 33,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "An alert_actions.conf does not exist in the app bundle.",
                                    "filename": "check_alert_actions_config.py"
                                }
                            ],
                            "description": "Check that a valid alert_actions.conf file exists at \n default/alert_actions.conf.",
                            "name": "check_alert_actions_conf_exists"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that each custom alert action has a valid executable.",
                            "name": "check_alert_actions_exe_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 63,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No alert_actions.conf was found.",
                                    "filename": "check_alert_actions_config.py"
                                }
                            ],
                            "description": "Check that icon files defined for alert actions in alert_actions.conf \n exist.\n Custom Alert Action Component Reference",
                            "name": "check_alert_icon_exists_for_custom_alerts"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check if any custom alert actions have executable arguments.",
                            "name": "check_for_explict_exe_args"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that each custom alert action's payload format has a value of xml\n or json.",
                            "name": "check_for_payload_format"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that custom alert actions are user configurable with\n setup.xml\n file.",
                            "name": "check_setup_xml_custom_alerts"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that each custom alert action has an associated html file.",
                            "name": "check_workflow_html_exists_for_custom_alert"
                        }
                    ],
                    "name": "check_alert_actions_config",
                    "description": "Alert actions structure and standards"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/six.py Line Number: 82",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/jsonschema/_reflect.py Line Number: 81",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/requests/packages/urllib3/packages/six.py Line Number: 82",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/mako/util.py Line Number: 45",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/mako/runtime.py Line Number: 643",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/jinja2/utils.py Line Number: 139",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/jinja2/utils.py Line Number: 140",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/jinja2/loaders.py Line Number: 472",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/urllib3/packages/six.py Line Number: 74",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/solnlib/packages/simpleyaml/constructor.py Line Number: 489",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/splunk_app_add_on_builder/solnlib/packages/simpleyaml/constructor.py Line Number: 505",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/six.py Line Number: 82",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/jsonschema/_reflect.py Line Number: 81",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/requests/packages/urllib3/packages/six.py Line Number: 82",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/mako/util.py Line Number: 45",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/mako/runtime.py Line Number: 643",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/jinja2/utils.py Line Number: 139",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/jinja2/utils.py Line Number: 140",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/jinja2/loaders.py Line Number: 472",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/solnlib/packages/requests/packages/urllib3/packages/six.py Line Number: 74",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/solnlib/packages/simpleyaml/constructor.py Line Number: 489",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/ta_generator/resources_lib/solnlib/packages/simpleyaml/constructor.py Line Number: 505",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 221,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The __import__ function was detected being used. Please use the `import` keyword instead. File: bin/validation_engine/utility.py Line Number: 47",
                                    "filename": "check_python_files.py"
                                }
                            ],
                            "description": "Check that the python __import__ method is not used.",
                            "name": "check_built_in_import_function"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that there are no .pyc or .pyo files included in the app.",
                            "name": "check_for_compiled_python"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 193,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A generic python import was detected. All module imports must specify what is imported. File: bin/ta_meta_management/meta_manager.py Line Number: 8",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 193,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A generic python import was detected. All module imports must specify what is imported. File: bin/splunk_app_add_on_builder/jsonpath_rw/jsonpath.py Line Number: 5",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 193,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A generic python import was detected. All module imports must specify what is imported. File: bin/splunk_app_add_on_builder/mako/_ast_util.py Line Number: 33",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 193,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A generic python import was detected. All module imports must specify what is imported. File: bin/ta_generator/resources_lib/jsonpath_rw/jsonpath.py Line Number: 5",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 193,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "A generic python import was detected. All module imports must specify what is imported. File: bin/ta_generator/resources_lib/mako/_ast_util.py Line Number: 33",
                                    "filename": "check_python_files.py"
                                }
                            ],
                            "description": "Check that all python imports are explicit. from package import * may\n run unneeded code.",
                            "name": "check_for_generic_imports"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 238,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "Files will be reviewed during code review.",
                                    "filename": "check_python_files.py"
                                }
                            ],
                            "description": "Check that Python scripts use OS-safe paths (NOT Windows-specific\n or *nix-specific paths). Whenever possible use os.path.",
                            "name": "check_for_hard_coded_paths"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 172,
                                    "code": "reporter.not_applicable(reporter_output)",
                                    "message": "No .pyc or .pyo files found.",
                                    "filename": "check_python_files.py"
                                }
                            ],
                            "description": "Check that any compiled files (.pyo, .pyc) have a matching\n source file (.py).",
                            "name": "check_for_mismatch_compile_files"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for the use of threading, and multiprocesses. Threading must be\n used with discretion and not negatively affect the Splunk installation as a\n whole.",
                            "name": "check_for_possible_threading"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/field_extraction_mi.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/tab_declare.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_mi.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/Constants.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/prebuilt_panel_search.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/cim_mapping_validator.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/DataModelMatcher.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/TestTemplate.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/CaseGenerator.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/__init__.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/ConstraintsComparer.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/FiledsComparer.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/DataModelParser.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/validation_cim_mapping/PrebuiltPanelSearch.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/executor_service/__init__.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/executor_service/concurrent/__init__.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/executor_service/concurrent/process_pool.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/executor_service/concurrent/thread_pool.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/executor_service/concurrent/concurrent_executor.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/field_extraction_builder/regex_generator.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/field_extraction_builder/regex_cluster.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/field_extraction_builder/regex_logger.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/field_extraction_builder/regex_tokenizer.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "python script found. File: bin/field_extraction_builder/__init__.py",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 1143 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check if the app contains python scripts.",
                            "name": "check_for_python_files"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/field_extraction_mi.py Line Number: 5",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/tab_declare.py Line Number: 5",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/validation_cim_mapping/cim_mapping_validator.py Line Number: 1",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/validation_cim_mapping/DataModelParser.py Line Number: 3",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/validation_cim_mapping/PrebuiltPanelSearch.py Line Number: 5",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/field_extraction_builder/regex_logger.py Line Number: 8",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/field_extraction_builder/regex_conf.py Line Number: 5",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/field_extraction_builder/data_format/format_handler_base.py Line Number: 4",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/field_extraction_builder/data_format/format_handler_kv.py Line Number: 4",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/tabuilder_utility/common_util.py Line Number: 3",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/tabuilder_utility/app_util.py Line Number: 1",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/app_util.py Line Number: 220",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/app_util.py Line Number: 223",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: shutil.rmtree File: bin/tabuilder_utility/app_util.py Line Number: 227",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/tabuilder_utility/export_util.py Line Number: 1",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/export_util.py Line Number: 75",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: shutil.move File: bin/tabuilder_utility/export_util.py Line Number: 132",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/export_util.py Line Number: 136",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/export_util.py Line Number: 137",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/tabuilder_utility/file_content_util.py Line Number: 3",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/file_content_util.py Line Number: 14",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/file_content_util.py Line Number: 94",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: import os File: bin/tabuilder_utility/temp_manager.py Line Number: 1",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 83,
                                    "code": "reporter.manual_check(reporter_output)",
                                    "message": "The following line will be inspected during code review. Match: os.remove File: bin/tabuilder_utility/temp_manager.py Line Number: 60",
                                    "filename": "check_python_files.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 360 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check for the use of subprocess and OS command calls in Python.",
                            "name": "check_for_questionable_commands"
                        }
                    ],
                    "name": "check_python_files",
                    "description": "Python file standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that all .meta files parse with no trailing whitespace after \n continuations with no duplicate stanzas or options.",
                            "name": "check_meta_file_parsing"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that .meta files do not have duplicate\n stanzas.",
                            "name": "check_validate_no_duplicate_stanzas"
                        }
                    ],
                    "name": "check_meta_files",
                    "description": "Meta File Standards"
                },
                {
                    "checks": [
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 45,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the appserver/ directory exists.",
                            "name": "check_appserver_folder_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 58,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the bin/ directory exists.",
                            "name": "check_bin_folder_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 97,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the bin/README file exists.",
                            "name": "check_bin_readme_file_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 110,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the default/app.conf file exists.",
                            "name": "check_default_app_conf_file_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 123,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the default/deep_dive_drilldowns.conf file exists.",
                            "name": "check_default_deep_dive_drilldowns_conf_file_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 71,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the default/ directory exists.",
                            "name": "check_default_folder_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 136,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the default/inputs.conf file exists.",
                            "name": "check_default_inputs_conf_file_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 149,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that default/itsi_da.conf file exists.",
                            "name": "check_default_itsi_da_conf_file_exist"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 162,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the default/itsi_kpi_template.conf file exists.",
                            "name": "check_default_itsi_kpi_template_conf_file_exit"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 175,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the default/savedsearches.conf file exists.",
                            "name": "check_default_savedsearches_conf_file_exit"
                        },
                        {
                            "result": "not_applicable",
                            "messages": [
                                {
                                    "result": "not_applicable",
                                    "line": 84,
                                    "code": "reporter.not_applicable(\"This is not an ITSI module.\")",
                                    "message": "This is not an ITSI module.",
                                    "filename": "check_itsi_module_file_structure.py"
                                }
                            ],
                            "description": "Check that the metadata/ directory exists.",
                            "name": "check_metadata_folder_exist"
                        }
                    ],
                    "name": "check_itsi_module_file_structure",
                    "description": "ITSI module file and folder structure verification"
                },
                {
                    "checks": [
                        {
                            "result": "error",
                            "messages": [
                                {
                                    "result": "error",
                                    "line": 443,
                                    "code": "self.fun.__call__(*args)",
                                    "message": "Container Id was not set.",
                                    "filename": "/usr/local/lib/python2.7/dist-packages/splunk_appinspect/checks.py"
                                }
                            ],
                            "description": "Check that any standalone application configurations are valid, using the Splunk btool command.",
                            "name": "check_btool_standalone_results"
                        }
                    ],
                    "name": "check_btool",
                    "description": "Configurations that relate to running Splunk instances"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check Simple XML files for <list> element used in dashboards",
                            "name": "check_for_simple_xml_list_element"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check Simple XML files for <option> element with the deprecated option value \"refresh.auto.interval\"\n i.e. ",
                            "name": "check_for_simple_xml_option_element_with_deprecated_attribute_value"
                        },
                        {
                            "result": "failure",
                            "messages": [
                                {
                                    "result": "failure",
                                    "line": 107,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "As of splunk 6.5 this functionality is deprecated and should be removed in future app versions. Match: <_sre.SRE_Match object at 0x7ff3fac382a0> File: bin/ta_generator/ucc_resources/appserver/static/js/build/inputs_page.js Line: 1",
                                    "filename": "check_splunk_6_5_deprecated_features.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 107,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "As of splunk 6.5 this functionality is deprecated and should be removed in future app versions. Match: <_sre.SRE_Match object at 0x7ff3fac38780> File: bin/ta_generator/ucc_resources/appserver/static/js/build/configuration_page.js Line: 1",
                                    "filename": "check_splunk_6_5_deprecated_features.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 107,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "As of splunk 6.5 this functionality is deprecated and should be removed in future app versions. Match: <_sre.SRE_Match object at 0x7ff3fac16920> File: bin/ta_generator/ucc_resources/appserver/static/js/build/common.js Line: 123",
                                    "filename": "check_splunk_6_5_deprecated_features.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 107,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "As of splunk 6.5 this functionality is deprecated and should be removed in future app versions. Match: <_sre.SRE_Match object at 0x7ff40a40f2a0> File: appserver/static/js/controllers/BaseController.js Line: 6",
                                    "filename": "check_splunk_6_5_deprecated_features.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 107,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "As of splunk 6.5 this functionality is deprecated and should be removed in future app versions. Match: <_sre.SRE_Match object at 0x7ff3fac208b8> File: appserver/static/js/build/common.js Line: 286",
                                    "filename": "check_splunk_6_5_deprecated_features.py"
                                },
                                {
                                    "result": "failure",
                                    "line": 107,
                                    "code": "reporter.fail(reporter_output)",
                                    "message": "As of splunk 6.5 this functionality is deprecated and should be removed in future app versions. Match: <_sre.SRE_Match object at 0x7ff3fac20d98> File: appserver/static/js/build/common.js Line: 371",
                                    "filename": "check_splunk_6_5_deprecated_features.py"
                                }
                            ],
                            "description": "Checks that views are not importing splunkjs/mvc/headerview or splunkjs/mvc/footerrview.",
                            "name": "check_for_splunk_js_header_and_footer_view"
                        }
                    ],
                    "name": "check_splunk_6_5_deprecated_features",
                    "description": "Deprecated features from Splunk 6.5."
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for Advanced XML appserver/modules directory.",
                            "name": "check_for_advanced_xml_appserver_modules_directory"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for Advanced XML <module> elements.",
                            "name": "check_for_advanced_xml_module_elements"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for Advanced XML <view> elements that do not have the\n redirect or html types.",
                            "name": "check_for_advanced_xml_view_element"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for use of Django bindings.",
                            "name": "check_for_django_bindings"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for Simple XML <chart> panels with deprecated options\n charting.axisLabelsY.majorTickSize or\n charting.axisLabelsY.majorLabelVisibility.",
                            "name": "check_for_simple_xml_chart_element_with_deprecated_option_names"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for the deprecated <option name='previewResults'> in Simple XML \n files.",
                            "name": "check_for_simple_xml_option_element_with_name_previewResults"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for the deprecated <searchTemplate> element in Simple XML files.\n Use the <search> element instead.",
                            "name": "check_for_simple_xml_searchTemplate_element"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check for the deprecated <seed> option in Simple XML forms.\n Use the <initialValue> element instead.",
                            "name": "check_for_simple_xml_seed_element"
                        }
                    ],
                    "name": "check_splunk_6_3_deprecated_features",
                    "description": "Deprecated features from Splunk 6.3."
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that when using data models the datamodels.conf file only exists\n in the default directory.",
                            "name": "check_validate_data_models_conf_file_in_correct_locations"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that each stanza in \n datamodels.conf\n has a matching JSON file in default/data/models/.",
                            "name": "check_validate_no_missing_json_data"
                        }
                    ],
                    "name": "check_data_models_config",
                    "description": "Data model files and configurations"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 30,
                                    "code": "reporter.manual_check(\"Documentation will be read during code review.\")",
                                    "message": "Documentation will be read during code review.",
                                    "filename": "check_support_requirements.py"
                                }
                            ],
                            "description": "Check that the app's documentation lists contact information and level\n of support for the app. Any level of support is acceptable for developer\n supported apps, as long as it is clearly declared in documentation.\n Community supported apps must be open source with a public repository.\n For example:\n * Email support during weekday business hours (US, West Coast).\n * Phone support 24x7 @ +1 (555) 123-4567.\n * This is an open source project, no support provided, public repository\n available.",
                            "name": "check_link_includes_contact_info"
                        }
                    ],
                    "name": "check_support_requirements",
                    "description": "Support requirements"
                },
                {
                    "checks": [
                        {
                            "result": "error",
                            "messages": [
                                {
                                    "result": "error",
                                    "line": 443,
                                    "code": "self.fun.__call__(*args)",
                                    "message": "Container Id was not set.",
                                    "filename": "/usr/local/lib/python2.7/dist-packages/splunk_appinspect/checks.py"
                                }
                            ],
                            "description": "Check that the modular input scheme arguments match the inputs.conf.spec file.",
                            "name": "check_validate_modular_inputs_scheme_args"
                        },
                        {
                            "result": "error",
                            "messages": [
                                {
                                    "result": "error",
                                    "line": 443,
                                    "code": "self.fun.__call__(*args)",
                                    "message": "Container Id was not set.",
                                    "filename": "/usr/local/lib/python2.7/dist-packages/splunk_appinspect/checks.py"
                                }
                            ],
                            "description": "Check that the modular input scheme arguments match the inputs.conf.spec file.",
                            "name": "check_validate_modular_inputs_scheme"
                        }
                    ],
                    "name": "check_modular_inputs_dynamic",
                    "description": "Dynamic checks for modular inputs"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 22,
                                    "code": "reporter.manual_check(\"App will be checked during code review.\")",
                                    "message": "App will be checked during code review.",
                                    "filename": "check_support_and_installation_standards.py"
                                }
                            ],
                            "description": "Check that the app installs on all claimed target platforms.",
                            "name": "check_install_on_claimed_targets"
                        }
                    ],
                    "name": "check_support_and_installation_standards",
                    "description": "Platform targets and claimed supported Splunk versions"
                },
                {
                    "checks": [
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 56,
                                    "code": "reporter.manual_check(\"Code will be manually inspected during code review.\")",
                                    "message": "Code will be manually inspected during code review.",
                                    "filename": "check_malware.py"
                                }
                            ],
                            "description": "Check that no plain text authorization credentials are stored in the \n app.",
                            "name": "check_authorization_credentials"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 47,
                                    "code": "reporter.manual_check(\"Links will be inspected during code review.\")",
                                    "message": "Links will be inspected during code review.",
                                    "filename": "check_malware.py"
                                }
                            ],
                            "description": "Check that embedded links included in the app are not malicious.",
                            "name": "check_embedded_links"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "@stanza: <<<DICK>>> like object (bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/conf_manager/ta_conf_manager.py:49) [dick]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "@stanza: <<<DICK>>> like object (bin/splunk_app_add_on_builder/cloudconnectlib/splunktalib/conf_manager/ta_conf_manager.py:67) [dick]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# terms of the Do What The <<<FUCK>>> You Want To Public License,... (bin/splunk_app_add_on_builder/jsonpath_rw/bin/jsonpath.py:5) [Fuck]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# This is fragile as <<<HELL>>>, but it seems to be the only way ... (bin/splunk_app_add_on_builder/requests/packages/urllib3/contrib/socks.py:96) [hell]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>,... (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:60) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>>, <<<ASS>>>, <<<ASS>>>, OTH, OTH, OTH, OTH, OTH,   # 78 ... (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:61) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "0,  3,  3,  3,  1,  1,  3,  3,  # <<<ASS>>> (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:89) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>> = 3  # ascii small letter (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:38) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# UDF OTH ASC <<<ASS>>> ACV ACO ASV ASO (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:85) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>,... (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:59) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "OTH, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<AS... (bin/splunk_app_add_on_builder/requests/packages/chardet/latin1prober.py:58) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# <<<BUGGER>>> to try and figure out why the resulting parser doe... (bin/splunk_app_add_on_builder/ply/yacc.py:2990) [bugger]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>,... (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:60) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>>, <<<ASS>>>, <<<ASS>>>, OTH, OTH, OTH, OTH, OTH,   # 78 ... (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:61) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "0,  3,  3,  3,  1,  1,  3,  3,  # <<<ASS>>> (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:89) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>> = 3  # ascii small letter (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:38) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# UDF OTH ASC <<<ASS>>> ACV ACO ASV ASO (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:85) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "<<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>,... (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:59) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "OTH, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<ASS>>>, <<<AS... (bin/splunk_app_add_on_builder/solnlib/packages/requests/packages/chardet/latin1prober.py:58) [ASS]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "},events:t.extend({},i.prototype.events,{\"change input[type=range... (bin/ta_generator/ucc_resources/appserver/static/js/build/common.js:184) [butt]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "@stanza: <<<DICK>>> like object (bin/ta_generator/resources_lib/cloudconnectlib/splunktalib/conf_manager/ta_conf_manager.py:49) [dick]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "@stanza: <<<DICK>>> like object (bin/ta_generator/resources_lib/cloudconnectlib/splunktalib/conf_manager/ta_conf_manager.py:67) [dick]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# terms of the Do What The <<<FUCK>>> You Want To Public License,... (bin/ta_generator/resources_lib/jsonpath_rw/bin/jsonpath.py:5) [Fuck]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "manual_check",
                                    "line": 40,
                                    "code": "formatted, os.path.join(dir, filename), lineno, found))",
                                    "message": "# This is fragile as <<<HELL>>>, but it seems to be the only way ... (bin/ta_generator/resources_lib/requests/packages/urllib3/contrib/socks.py:96) [hell]",
                                    "filename": "check_malware.py"
                                },
                                {
                                    "result": "warning",
                                    "line": 53,
                                    "code": "in reporter.report_records()]",
                                    "message": "Suppressed 27 manual_check messages",
                                    "filename": "validation_report_json_formatter.py"
                                }
                            ],
                            "description": "Check that the app does not include any offensive material.",
                            "name": "check_for_offensive_material"
                        },
                        {
                            "result": "manual_check",
                            "messages": [
                                {
                                    "result": "manual_check",
                                    "line": 64,
                                    "code": "\"Code will be manually inspected during code review.\")",
                                    "message": "Code will be manually inspected during code review.",
                                    "filename": "check_malware.py"
                                }
                            ],
                            "description": "Check that no sensitive hostnames/IPs are stored in the app.",
                            "name": "check_hostnames_and_ips"
                        }
                    ],
                    "name": "check_malware",
                    "description": "Malware/viruses, malicious content, user security standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that all config files parse cleanly- no trailing whitespace after \n continuations, no duplicated stanzas or options.",
                            "name": "check_config_file_parsing"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that no duplicate \n stanzas exist in .conf files.",
                            "name": "check_validate_no_duplicate_stanzas"
                        }
                    ],
                    "name": "check_configuration_files",
                    "description": "Configuration file standards"
                },
                {
                    "checks": [
                        {
                            "result": "success",
                            "messages": [],
                            "description": "All files in the /lookups directory should be referenced in\n transforms.conf.",
                            "name": "check_all_lookups_are_used"
                        },
                        {
                            "result": "success",
                            "messages": [],
                            "description": "Check that all capture groups are used in transforms.conf.\n Groups not used for capturing should use the\n non-capture group syntax",
                            "name": "check_capture_groups_in_transforms"
                        }
                    ],
                    "name": "check_transforms_configuration_file",
                    "description": "Transforms.conf File Standards"
                }
            ],
            "app_author": "Splunk",
            "app_version": "2.1.0",
            "app_hash": "bb0f92bfa65e77bb0bdcaf6c24578d37"
        }
    ],
    "summary": {
        "skipped": 0,
        "success": 97,
        "not_applicable": 53,
        "failure": 5,
        "warning": 0,
        "error": 6,
        "manual_check": 41
    },
    "metrics": {
        "start_time": "2017-01-16T02:01:03.552860",
        "execution": 260.706274,
        "end_time": "2017-01-16T02:05:24.259134"
    },
    "run_parameters": {
        "version": null,
        "appinspect_version": "1.4.0.86",
        "splunk_version": null,
        "splunkbase_id": "unknown",
        "api_request_id": "9ed3f3c7-db8f-11e6-932f-02420aff0009",
        "package_location": "9ed3f3c7-db8f-11e6-932f-02420aff0009-splunk_app_addon-builder-2.1.0-2120.spl",
        "identity": "kyanite2016"
    },
    "request_id": "7f46977b-317a-4e4c-b4c3-c4afff88c282"
}